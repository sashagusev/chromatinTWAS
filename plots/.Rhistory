imp = read.table(paste(p,".PGC.SCZ2.imp.NOHLA",sep=''),as.is=T)
imp = imp[imp[,4] != 0,]
m = match(imp[,2],genes[,5])
cat( p , sum(is.na(m)) , "unmatched\n")
imp = imp[!is.na(m),]
m = m[!is.na(m)]
cur.z = imp[,3] / sqrt(imp[,4])
z.thresh = qnorm(0.05/(2*length(cur.z)),lower.tail=F)
cur.chr = genes[m,2]
cur.pos = (genes[m,3] + genes[m,4])/2
keep = cur.z^2 > z.thresh^2
cur.z = cur.z[keep]
cur.chr = cur.chr[keep]
cur.pos = cur.pos[keep]
imp = imp[keep,]
points.x = rep(NA,length(cur.pos))
points.y = rep(NA,length(cur.pos))
points.txt = rep(NA,length(cur.pos))
for ( c in 1:22 ) {
keep = (cur.chr == c)
points.x[keep] = cur.pos[keep] - chr.starts[c] + offsets[c]
points.y[keep] = cur.z[keep]
points.txt[keep] = imp[keep,2]
}
df = data.frame(pos = points.x , zscore = points.y)
}
df
points.txt
for ( p in pop ) {
imp = read.table(paste(p,".PGC.SCZ2.imp.NOHLA",sep=''),as.is=T)
imp = imp[imp[,4] != 0,]
m = match(imp[,2],genes[,5])
cat( p , sum(is.na(m)) , "unmatched\n")
imp = imp[!is.na(m),]
m = m[!is.na(m)]
cur.z = imp[,3] / sqrt(imp[,4])
z.thresh = qnorm(0.05/(2*length(cur.z)),lower.tail=F)
cur.chr = genes[m,2]
cur.pos = (genes[m,3] + genes[m,4])/2
keep = cur.z^2 > z.thresh^2
cur.z = cur.z[keep]
cur.chr = cur.chr[keep]
cur.pos = cur.pos[keep]
imp = imp[keep,]
points.x = rep(NA,length(cur.pos))
points.y = rep(NA,length(cur.pos))
points.txt = rep(NA,length(cur.pos))
for ( c in 1:22 ) {
keep = (cur.chr == c)
points.x[keep] = cur.pos[keep] - chr.starts[c] + offsets[c]
points.y[keep] = cur.z[keep]
points.txt[keep] = imp[keep,2]
}
df = data.frame(pos = points.x , zscore = points.y, gene = points.txt)
}
df
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 4))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 4)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) + theme_classic(base_size = 10)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_text_repel(data = df , aes(pos, zscore, label = gene),size=4)
geom_point(aes(text = gene), size = 1) + theme_classic(base_size = 10) + ylab("Z-score")
(gg <- ggplotly(p))
library(ggrepel)
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_text_repel(data = df , aes(pos, zscore, label = gene),size=4)
geom_point(aes(text = gene), size = 1) + theme_classic(base_size = 10) + ylab("Z-score")
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_text_repel(data = df , aes(pos, zscore, label = gene),size=4)
geom_point(aes(text = gene), size = 1) + theme_classic(base_size = 10) + ylab("Z-score")
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_text_repel(data = df , aes(pos, zscore, label = gene),size=4)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_text_repel(data = df , aes(pos, zscore, label = gene),size=4) +
geom_point(aes(text = gene), size = 1)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends/2 ) +
ylab("Z-score")
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score")
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + scale_y_continuous(breaks=c(-8,-4,4,8))
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + scale_y_continuous(breaks=c(-8,-4,4,8)) + ylim(-8,8)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + scale_y_continuous(breaks=c(-8,-4,4,8))
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + scale_y_continuous(breaks=c(-8,-4,0,4,8))
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + scale_y_continuous(breaks=c(4,8))
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(4,8)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(4,8) + geom_label()
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(4,8) + geom_label(label=df$gene)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = gene), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(4,8) + geom_text(label=df$gene)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = zscore), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(4,8) + geom_text(label=df$gene)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = zscore), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(4,8) + geom_text(label=df$gene,adj=1)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = zscore), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(4,8) + geom_text(label=df$gene,nudge_y=1)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = zscore), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(4,8) + geom_text(label=df$gene,nudge_y=0.1)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = zscore), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(-8,8) + geom_text(label=df$gene,nudge_y=0.1)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = zscore), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(-8,8) + geom_text(label=df$gene,nudge_x=0.1)
(gg <- ggplotly(p))
p <- ggplot(data = df, aes(x = pos, y = zscore)) +
geom_point(aes(text = zscore), size = 1) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends ) +
ylab("Z-score") + ylim(-8,8)
(gg <- ggplotly(p))
library('ggrepel')
library('RColorBrewer')
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
pop = c("CMC","NTR","YFS","METSIM")
pop.ttl = c("Brain (CMC)","Blood (NTR)","Blood (YFS)","Adipose (METSIM)")
genes = read.table("UCSC.hg19.knowngenes.longest",as.is=T,sep='\t')
genes[,2] = as.numeric( gsub("chr","",genes[,2]) )
# get chr bounds
chr.starts = rep(0,22)
chr.ends = rep(0,22)
for ( i in 1:22 ) {
chr.starts[i] = min( genes[genes[,2] == i,3] , na.rm=T )
chr.ends[i] = max( genes[genes[,2] == i,4] , na.rm=T )
}
offsets = c(0,cumsum(chr.ends - chr.starts))
clr = brewer.pal(3,"Set1")
clr = c("gray70","gray60",clr[1:2])
clumped = read.table("../CMC/COMBINED_SCORE/clump.rsq30.transcriptomewide.out",as.is=T)
plots = list()
for ( pi in 1:length(pop) ) {
p = pop[pi]
imp = read.table(paste(p,".PGC.SCZ2.imp.NOHLA",sep=''),as.is=T)
imp = imp[imp[,4] != 0,]
m = match(imp[,2],genes[,5])
cat( p , sum(is.na(m)) , "unmatched\n")
imp = imp[!is.na(m),]
m = m[!is.na(m)]
cur.chr = genes[m,2]
cur.pos = (genes[m,3] + genes[m,4])/2
cur.z = imp[,3] / sqrt(imp[,4])
z.thresh = qnorm(0.05/(2*length(cur.z)),lower.tail=F)
ylm = max(abs(cur.z),na.rm=T)
ylm = c(-8,8)
top = clumped[clumped[,3] == p,]
top.z = top[,5]
m = match(top[,4],genes[,5])
points.x = rep(NA,length(cur.pos))
points.y = rep(NA,length(cur.pos))
points.clr = rep(NA,length(cur.pos))
points.txt = rep(NA,length(cur.pos))
# plot the chromomsomes
for ( c in 1:22 ) {
keep = (cur.chr == c)
points.x[keep] = cur.pos[keep] - chr.starts[c] + offsets[c]
points.y[keep] = cur.z[keep]
points.clr[keep] = clr[(c %% 2) + 1]
top.all = keep & cur.z^2 > z.thresh^2
points.clr[ top.all & cur.z > 0 ] = clr[3]
points.clr[ top.all & cur.z < 0 ] = clr[4]
points.txt[ top.all ] = imp[top.all,2]
#keep = (genes[m,2] == c)
#if ( sum(keep) > 0 ) {
#	top.pos = (genes[m,3] + genes[m,4])/2
#	points( top.pos[keep] - chr.starts[c] + offsets[c] , top.z[keep] , pch=19 , cex=0.5 , col= clr[3])
#	text( top.pos[keep] - chr.starts[c] + offsets[c] , top.z[keep] , top[keep,4] , col=clr[3] , cex=0.5 , pos=3 )
#}
}
lbl.keep = !is.na(points.txt)
df.main = data.frame(pos = points.x , yval = -log10( 2*(pnorm( abs(points.y) , lower.tail=F)) ) , labels = points.txt , colors = points.clr )
df.top = data.frame(pos = points.x[lbl.keep] , yval = -log10( 2*(pnorm( abs(points.y[lbl.keep]) , lower.tail=F)) ) , labels = points.txt[lbl.keep] , colors = points.clr[lbl.keep])
# text
plots[[p]] = ggplot() +
geom_point(data = df.main, aes(pos, yval), color = points.clr , size=0.75 ) +
geom_text_repel(data = df.top , aes(pos, yval, label = labels),size=2,segment.size = 0.25) +
geom_point(data = df.top , aes(pos, yval), color = points.clr[lbl.keep] , size=0.75 ) +
theme_classic(base_size = 10) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends/2 ) +
ylim(0,14) + ylab("-log10 P-value") +
ggtitle(pop.ttl[[pi]]) + theme(plot.title = element_text(hjust = 0))
# labels
#plots[[p]] = ggplot() +
#geom_point(data = df.main, aes(pos, zscore^2), color = points.clr , size=0.75 ) +
#geom_label_repel(data = df.top , aes(pos, zscore^2, label = labels, fill=colors),size=2,fontface = 'bold', color = 'white', box.padding = unit(0.25, "lines"), point.padding = unit(0.5, "lines")) +
#geom_point(data = df.top , aes(pos, zscore^2), color = points.clr[lbl.keep] , size=0.75 ) +
#theme_classic(base_size = 10) +
#scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends/2 ) +
#ylim(0,70) +
#ggtitle(pop.ttl[[pi]]) + theme(plot.title = element_text(hjust = 0))
}
png("manhattan_scz.png",height=20)
multiplot( plots[["CMC"]] , plots[["NTR"]] , plots[["YFS"]] , plots[["METSIM"]] )
dev.off()
png("manhattan_scz.png",height=600,width=600)
multiplot( plots[["CMC"]] , plots[["NTR"]] , plots[["YFS"]] , plots[["METSIM"]] )
dev.off()
library('ggrepel')
library('RColorBrewer')
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
pop = c("CMC","NTR","YFS","METSIM")
pop.ttl = c("Brain (CMC)","Blood (NTR)","Blood (YFS)","Adipose (METSIM)")
genes = read.table("UCSC.hg19.knowngenes.longest",as.is=T,sep='\t')
genes[,2] = as.numeric( gsub("chr","",genes[,2]) )
# get chr bounds
chr.starts = rep(0,22)
chr.ends = rep(0,22)
for ( i in 1:22 ) {
chr.starts[i] = min( genes[genes[,2] == i,3] , na.rm=T )
chr.ends[i] = max( genes[genes[,2] == i,4] , na.rm=T )
}
offsets = c(0,cumsum(chr.ends - chr.starts))
clr = brewer.pal(3,"Set1")
clr = c("gray70","gray60",clr[1:2])
clumped = read.table("clump.rsq30.transcriptomewide.out",as.is=T)
plots = list()
for ( pi in 1:length(pop) ) {
p = pop[pi]
imp = read.table(paste(p,".PGC.SCZ2.imp.NOHLA",sep=''),as.is=T)
imp = imp[imp[,4] != 0,]
m = match(imp[,2],genes[,5])
cat( p , sum(is.na(m)) , "unmatched\n")
imp = imp[!is.na(m),]
m = m[!is.na(m)]
cur.chr = genes[m,2]
cur.pos = (genes[m,3] + genes[m,4])/2
cur.z = imp[,3] / sqrt(imp[,4])
z.thresh = qnorm(0.05/(2*length(cur.z)),lower.tail=F)
ylm = max(abs(cur.z),na.rm=T)
ylm = c(-8,8)
top = clumped[clumped[,3] == p,]
top.z = top[,5]
m = match(top[,4],genes[,5])
points.x = rep(NA,length(cur.pos))
points.y = rep(NA,length(cur.pos))
points.clr = rep(NA,length(cur.pos))
points.txt = rep(NA,length(cur.pos))
# plot the chromomsomes
for ( c in 1:22 ) {
keep = (cur.chr == c)
points.x[keep] = cur.pos[keep] - chr.starts[c] + offsets[c]
points.y[keep] = cur.z[keep]
points.clr[keep] = clr[(c %% 2) + 1]
top.all = keep & cur.z^2 > z.thresh^2
points.clr[ top.all & cur.z > 0 ] = clr[3]
points.clr[ top.all & cur.z < 0 ] = clr[4]
points.txt[ top.all ] = imp[top.all,2]
#keep = (genes[m,2] == c)
#if ( sum(keep) > 0 ) {
#	top.pos = (genes[m,3] + genes[m,4])/2
#	points( top.pos[keep] - chr.starts[c] + offsets[c] , top.z[keep] , pch=19 , cex=0.5 , col= clr[3])
#	text( top.pos[keep] - chr.starts[c] + offsets[c] , top.z[keep] , top[keep,4] , col=clr[3] , cex=0.5 , pos=3 )
#}
}
lbl.keep = !is.na(points.txt)
df.main = data.frame(pos = points.x , yval = -log10( 2*(pnorm( abs(points.y) , lower.tail=F)) ) , labels = points.txt , colors = points.clr )
df.top = data.frame(pos = points.x[lbl.keep] , yval = -log10( 2*(pnorm( abs(points.y[lbl.keep]) , lower.tail=F)) ) , labels = points.txt[lbl.keep] , colors = points.clr[lbl.keep])
# text
plots[[p]] = ggplot() +
geom_point(data = df.main, aes(pos, yval), color = points.clr , size=0.75 ) +
geom_text_repel(data = df.top , aes(pos, yval, label = labels),size=2,segment.size = 0.25) +
geom_point(data = df.top , aes(pos, yval), color = points.clr[lbl.keep] , size=0.75 ) +
theme_classic(base_size = 10) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends/2 ) +
ylim(0,14) + ylab("-log10 P-value") +
ggtitle(pop.ttl[[pi]]) + theme(plot.title = element_text(hjust = 0))
# labels
#plots[[p]] = ggplot() +
#geom_point(data = df.main, aes(pos, zscore^2), color = points.clr , size=0.75 ) +
#geom_label_repel(data = df.top , aes(pos, zscore^2, label = labels, fill=colors),size=2,fontface = 'bold', color = 'white', box.padding = unit(0.25, "lines"), point.padding = unit(0.5, "lines")) +
#geom_point(data = df.top , aes(pos, zscore^2), color = points.clr[lbl.keep] , size=0.75 ) +
#theme_classic(base_size = 10) +
#scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends/2 ) +
#ylim(0,70) +
#ggtitle(pop.ttl[[pi]]) + theme(plot.title = element_text(hjust = 0))
}
png("manhattan_scz.png",height=600,width=600)
multiplot( plots[["CMC"]] , plots[["NTR"]] , plots[["YFS"]] , plots[["METSIM"]] )
dev.off()
png("manhattan_scz.png",height=800,width=800)
multiplot( plots[["CMC"]] , plots[["NTR"]] , plots[["YFS"]] , plots[["METSIM"]] )
dev.off()
?png
?par
library('ggrepel')
library('RColorBrewer')
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
pop = c("CMC","NTR","YFS","METSIM")
pop.ttl = c("Brain (CMC)","Blood (NTR)","Blood (YFS)","Adipose (METSIM)")
genes = read.table("UCSC.hg19.knowngenes.longest",as.is=T,sep='\t')
genes[,2] = as.numeric( gsub("chr","",genes[,2]) )
# get chr bounds
chr.starts = rep(0,22)
chr.ends = rep(0,22)
for ( i in 1:22 ) {
chr.starts[i] = min( genes[genes[,2] == i,3] , na.rm=T )
chr.ends[i] = max( genes[genes[,2] == i,4] , na.rm=T )
}
offsets = c(0,cumsum(chr.ends - chr.starts))
clr = brewer.pal(3,"Set1")
clr = c("gray70","gray60",clr[1:2])
clumped = read.table("clump.rsq30.transcriptomewide.out",as.is=T)
plots = list()
for ( pi in 1:length(pop) ) {
p = pop[pi]
imp = read.table(paste(p,".PGC.SCZ2.imp.NOHLA",sep=''),as.is=T)
imp = imp[imp[,4] != 0,]
m = match(imp[,2],genes[,5])
cat( p , sum(is.na(m)) , "unmatched\n")
imp = imp[!is.na(m),]
m = m[!is.na(m)]
cur.chr = genes[m,2]
cur.pos = (genes[m,3] + genes[m,4])/2
cur.z = imp[,3] / sqrt(imp[,4])
z.thresh = qnorm(0.05/(2*length(cur.z)),lower.tail=F)
ylm = max(abs(cur.z),na.rm=T)
ylm = c(-8,8)
top = clumped[clumped[,3] == p,]
top.z = top[,5]
m = match(top[,4],genes[,5])
points.x = rep(NA,length(cur.pos))
points.y = rep(NA,length(cur.pos))
points.clr = rep(NA,length(cur.pos))
points.txt = rep(NA,length(cur.pos))
# plot the chromomsomes
for ( c in 1:22 ) {
keep = (cur.chr == c)
points.x[keep] = cur.pos[keep] - chr.starts[c] + offsets[c]
points.y[keep] = cur.z[keep]
points.clr[keep] = clr[(c %% 2) + 1]
top.all = keep & cur.z^2 > z.thresh^2
points.clr[ top.all & cur.z > 0 ] = clr[3]
points.clr[ top.all & cur.z < 0 ] = clr[4]
points.txt[ top.all ] = imp[top.all,2]
#keep = (genes[m,2] == c)
#if ( sum(keep) > 0 ) {
#	top.pos = (genes[m,3] + genes[m,4])/2
#	points( top.pos[keep] - chr.starts[c] + offsets[c] , top.z[keep] , pch=19 , cex=0.5 , col= clr[3])
#	text( top.pos[keep] - chr.starts[c] + offsets[c] , top.z[keep] , top[keep,4] , col=clr[3] , cex=0.5 , pos=3 )
#}
}
lbl.keep = !is.na(points.txt)
df.main = data.frame(pos = points.x , yval = -log10( 2*(pnorm( abs(points.y) , lower.tail=F)) ) , labels = points.txt , colors = points.clr )
df.top = data.frame(pos = points.x[lbl.keep] , yval = -log10( 2*(pnorm( abs(points.y[lbl.keep]) , lower.tail=F)) ) , labels = points.txt[lbl.keep] , colors = points.clr[lbl.keep])
# text
plots[[p]] = ggplot() +
geom_point(data = df.main, aes(pos, yval), color = points.clr , size=0.75 ) +
geom_text_repel(data = df.top , aes(pos, yval, label = labels),size=2,segment.size = 0.25) +
geom_point(data = df.top , aes(pos, yval), color = points.clr[lbl.keep] , size=0.75 ) +
theme_classic(base_size = 20) +
scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends/2 ) +
ylim(0,14) + ylab("-log10 P-value") +
ggtitle(pop.ttl[[pi]]) + theme(plot.title = element_text(hjust = 0))
# labels
#plots[[p]] = ggplot() +
#geom_point(data = df.main, aes(pos, zscore^2), color = points.clr , size=0.75 ) +
#geom_label_repel(data = df.top , aes(pos, zscore^2, label = labels, fill=colors),size=2,fontface = 'bold', color = 'white', box.padding = unit(0.25, "lines"), point.padding = unit(0.5, "lines")) +
#geom_point(data = df.top , aes(pos, zscore^2), color = points.clr[lbl.keep] , size=0.75 ) +
#theme_classic(base_size = 10) +
#scale_x_continuous("Physical position", labels = 1:22 , breaks = cumsum( chr.ends - chr.starts ) - chr.ends/2 ) +
#ylim(0,70) +
#ggtitle(pop.ttl[[pi]]) + theme(plot.title = element_text(hjust = 0))
}
png("manhattan_scz.png",height=600,width=600)
multiplot( plots[["CMC"]] , plots[["NTR"]] , plots[["YFS"]] , plots[["METSIM"]] )
dev.off()
source('~/github/chromaTWAS/plots/manh_web.R')
